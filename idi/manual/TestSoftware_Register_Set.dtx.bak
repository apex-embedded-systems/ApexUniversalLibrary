


@@Register Set
\ \ 

@@Summary
\ \ 
<table>
Register Name                                                 \NOTE     Mnemonic   Enumerated          \Size   Direction   Offset   Bank<p />(IA[2..0])
                                                                                    value                                            
============================================================  ========  =========  ==================  ======  ==========  =======  ====================
<b>::::::::: DIGITAL OUTPUT                                                                                                         
 VALUES :::::::::</b>                                                                                                                
<link Digital Output Group 0>                                           dog0       IDO_DO_GROUP0       BYTE    r           0        X
<link Digital Output Group 1>                                           dog1       IDO_DO_GROUP1       BYTE    r           1        X
<link Digital Output Group 2>                                           dog2       IDO_DO_GROUP2       BYTE    r           2        X
<link Digital Output Group 3>                                           dog3       IDO_DO_GROUP3       BYTE    r           3        X
<link Digital Output Group 4>                                           dog4       IDO_DO_GROUP4       BYTE    r           4        X
<link Digital Output Group 5>                                           dog5       IDO_DO_GROUP5       BYTE    r           5        X
\-                                                                      \-         \-                  BYTE    \-          6        X
<link Bank, Bank Select>                                      (4)       bank       \-                  BYTE    \-          7        X
\-                                                            \-        \-         \-                  BYTE    \-          8        000
\-                                                            \-        \-         \-                  BYTE    \-          9        000
\-                                                            \-        \-         \-                  BYTE    \-          10       000
\-                                                            \-        \-         \-                  BYTE    \-          11       000
\-                                                            \-        \-         \-                  BYTE    \-          12       000
\-                                                            \-        \-         \-                  BYTE    \-          13       000
<link Hardware ID LSB, ID_LSB>                                (4) (5)   idlsb      IDO_ID_LSB          BYTE    r           14       X
<link Hardware ID MSB, ID_MSB>                                (4) (5)   idmsb      IDO_ID_MSB          BYTE    r           15       X
<b>::::::::: SPI / FRAM                                       (4)                                                                   
 \:::::::::</b>                                                                                                                      
<link SPI ID LSB>                                             (4)       sidlsb     IDO_SPI_ID_LSB      BYTE    r           8        110
<link SPI ID MSB>                                             (4)       sidmsb     IDO_SPI_ID_MSB      BYTE    r           9        110
<link SPI Configuration>                                      (4)       scfg       IDO_SPI_CONFIG      BYTE    rw          10       110
<link SPI End Cycle Delay>                                    (4)       secd       IDO_SPI_ECD         BYTE    rw          11       110
<link SPI Half Clock Interval, SPI Half Clock Interval LSB>   (4)       shclsb     IDO_SPI_HCI_LSB     BYTE    rw          12       110
<link SPI Half Clock Interval, SPI Half Clock Interval MSB>   (4)       shcmsb     IDO_SPI_HCI_MSB     BYTE    rw          13       110
<link SPI Data>                                               (4)       sdata      IDO_SPI_DATA        BYTE    rw          8        111
<link SPI Transmit FIFO Status>                               (4)       stxf       IDO_SPI_TX_STATUS   BYTE    r           9        111
<link SPI Receive FIFO Status>                                (4)       srxf       IDO_SPI_RX_STATUS   BYTE    r           10       111
<link SPI Commit or Chip Select>                              (4)       scmt       IDO_SPI_COMMIT      BYTE    rw          11       111
Reserved                                                      (4)       \-         \-                  BYTE    rw          12       111
</table>
(1) Will always read back as 0x00

(2) Unused port locations. LED will not blink when reading or
writing to these specific port locations.

(3) If bit value = '1' then falling-edge (FE), otherwise
rising-edge (RE)

(4) Only available with jumpers M0 or M1 not set to zero
(i.e. one or both installed)

(5) ID used by software to determine firmware revision and
verification of board presence.
Summary
Overview of the %CARD_NAME% register set.
TODO
\ \  

@@Digital Output Group 0
<title Digital Output Group (Offset=0\, Bank=don't care)>

Summary
Digital Output Group 0
Description
Isolated digital outputs.
Register Layout
<b>Offset = 0x0. Bank register = don't care.</b>
<table>
D7    D6    D5    D4    D3    D2    D1    D0
====  ====  ====  ====  ====  ====  ====  ====
do7   do6   do5   do4   do3   do2   do1   do0
</table>
Bit Definitions
<table>
NAME      DIRECTION   DEFAULT   \DESCRIPTION
========  ==========  ========  -----------------------------------------------
do[7:0]   r           \-        Digital output bits, group 0. This register is
                                 always available independent of any banking.
</table>

<table>
BIT NAME   DIRECTION   CONNECTOR PIN POSITION   PHYSICAL I/O TYPE
=========  ==========  =======================  ==================
do0        r           J1.1 (+), J1.2 (-)       5V nominal output
do1        r           J1.3 (+), J1.4 (-)       5V nominal output
do2        r           J1.5 (+), J1.6 (-)       5V nominal output
do3        r           J1.7 (+), J1.8 (-)       5V nominal output
do4        r           J1.9 (+), J1.10 (-)      5V nominal output
do5        r           J1.11 (+), J1.12 (-)     5V nominal output
do6        r           J1.13 (+), J1.14 (-)     5V nominal output
do7        r           J1.15 (+), J1.16 (-)     5V nominal output
</table>
See Also
<link Summary, Register Summary>

@@Digital Output Group 1
<title Digital Output Group (Offset=1\, Bank=don't care)>

Summary
Digital Output Group 1
Description
Isolated digital outputs.
Register Layout
<b>Offset = 0x1. Bank register = don't care.</b>
<table>
D7     D6     D5     D4     D3     D2     D1    D0
=====  =====  =====  =====  =====  =====  ====  ====
do15   do14   do13   do12   do11   do10   do9   do8
</table>
Bit Definitions
<table>
NAME       DIRECTION   DEFAULT   \DESCRIPTION
=========  ==========  ========  -----------------------------------------------
do[15:8]   r           \-        Digital output bits, group 1. This register is
                                  always available independent of any banking.
</table>

<table>
BIT NAME   DIRECTION   CONNECTOR PIN POSITION   PHYSICAL I/O TYPE
=========  ==========  =======================  ==================
do8        r           J1.17 (+), J1.18 (-)     5V nominal output
do9        r           J1.19 (+), J1.20 (-)     5V nominal output
do10       r           J1.21 (+), J1.22 (-)     5V nominal output
do11       r           J1.23 (+), J1.24 (-)     5V nominal output
do12       r           J1.25 (+), J1.26 (-)     5V nominal output
do13       r           J1.27 (+), J1.28 (-)     5V nominal output
do14       r           J1.29 (+), J1.30 (-)     5V nominal output
do15       r           J1.31 (+), J1.32 (-)     5V nominal output
</table>
See Also
<link Summary, Register Summary>

@@Digital Output Group 2
<title Digital Output Group (Offset=2\, Bank=don't care)>

Summary
Digital Output Group 2
Description
Isolated digital outputs.
Register Layout
<b>Offset = 0x2. Bank register = don't care.</b>
<table>
D7     D6     D5     D4     D3     D2     D1     D0
=====  =====  =====  =====  =====  =====  =====  =====
do23   do22   do21   do20   do19   do18   do17   do16
</table>
Bit Definitions
<table>
NAME        DIRECTION   DEFAULT   \DESCRIPTION
==========  ==========  ========  -----------------------------------------------
do[23:16]   r           \-        Digital output bits, group 2. This register is
                                   always available independent of any banking.
</table>

<table>
BIT NAME   DIRECTION   CONNECTOR PIN POSITION   PHYSICAL I/O TYPE
=========  ==========  =======================  ==================
do16       r           J1.33 (+), J1.34 (-)     5V nominal output
do17       r           J1.35 (+), J1.36 (-)     5V nominal output
do18       r           J1.37 (+), J1.38 (-)     5V nominal output
do19       r           J1.39 (+), J1.40 (-)     5V nominal output
do20       r           J1.41 (+), J1.42 (-)     5V nominal output
do21       r           J1.43 (+), J1.44 (-)     5V nominal output
do22       r           J1.45 (+), J1.46 (-)     5V nominal output
do23       r           J1.47 (+), J1.48 (-)     5V nominal output
</table>
See Also
<link Summary, Register Summary>

@@Digital Output Group 3
<title Digital Output Group (Offset=3\, Bank=don't care)>

Summary
Digital Output Group 3
Description
Isolated digital outputs.
Register Layout
<b>Offset = 0x3. Bank register = don't care.</b>
<table>
D7     D6     D5     D4     D3     D2     D1     D0
=====  =====  =====  =====  =====  =====  =====  =====
do31   do30   do29   do28   do27   do26   do25   do24
</table>
Bit Definitions
<table>
NAME        DIRECTION   DEFAULT   \DESCRIPTION
==========  ==========  ========  -----------------------------------------------
do[31:24]   r           \-        Digital output bits, group 3. This register is
                                   always available independent of any banking.
</table>

<table>
BIT NAME   DIRECTION   CONNECTOR PIN POSITION   PHYSICAL I/O TYPE
=========  ==========  =======================  ==================
do24       r           J2.1 (+), J2.2 (-)       5V nominal output
do25       r           J2.3 (+), J2.4 (-)       5V nominal output
do26       r           J2.5 (+), J2.6 (-)       5V nominal output
do27       r           J2.7 (+), J2.8 (-)       5V nominal output
do28       r           J2.9 (+), J2.10 (-)      5V nominal output
do29       r           J2.11 (+), J2.12 (-)     5V nominal output
do30       r           J2.13 (+), J2.14 (-)     5V nominal output
do31       r           J2.15 (+), J2.16 (-)     5V nominal output
</table>
See Also
<link Summary, Register Summary>

@@Digital Output Group 4
<title Digital Output Group (Offset=4\, Bank=don't care)>

Summary
Digital Output Group 4
Description
Isolated digital outputs.
Register Layout
<b>Offset = 0x4. Bank register = don't care.</b>
<table>
D7     D6     D5     D4     D3     D2     D1     D0
=====  =====  =====  =====  =====  =====  =====  =====
do39   do38   do37   do36   do35   do34   do33   do32
</table>
Bit Definitions
<table>
NAME        DIRECTION   DEFAULT   \DESCRIPTION
==========  ==========  ========  -----------------------------------------------
do[39:32]   r           \-        Digital output bits, group 4. This register is
                                   always available independent of any banking.
</table>

<table>
BIT NAME   DIRECTION   CONNECTOR PIN POSITION   PHYSICAL I/O TYPE
=========  ==========  =======================  ==================
do32       r           J2.17 (+), J2.18 (-)     5V nominal output
do33       r           J2.19 (+), J2.20 (-)     5V nominal output
do34       r           J2.21 (+), J2.22 (-)     5V nominal output
do35       r           J2.23 (+), J2.24 (-)     5V nominal output
do36       r           J2.25 (+), J2.26 (-)     5V nominal output
do37       r           J2.27 (+), J2.28 (-)     5V nominal output
do38       r           J2.29 (+), J2.30 (-)     5V nominal output
do39       r           J2.31 (+), J2.32 (-)     5V nominal output
</table>
See Also
<link Summary, Register Summary>

@@Digital Output Group 5
<title Digital Output Group (Offset=5\, Bank=don't care)>

Summary
Digital Output Group 5
Description
Isolated digital outputs.
Register Layout
<b>Offset = 0x5. Bank register = don't care.</b>
<table>
D7     D6     D5     D4     D3     D2     D1     D0
=====  =====  =====  =====  =====  =====  =====  =====
do47   do46   do45   do44   do43   do42   do41   do40
</table>
Bit Definitions
<table>
NAME        DIRECTION   DEFAULT   \DESCRIPTION
==========  ==========  ========  -----------------------------------------------
do[47:40]   r           \-        Digital output bits, group 5. This register is
                                   always available independent of any banking.
</table>

<table>
BIT NAME   DIRECTION   CONNECTOR PIN POSITION   PHYSICAL I/O TYPE
=========  ==========  =======================  ==================
do40       r           J2.33 (+), J2.34 (-)     5V nominal output
do41       r           J2.35 (+), J2.36 (-)     5V nominal output
do42       r           J2.37 (+), J2.38 (-)     5V nominal output
do43       r           J2.39 (+), J2.40 (-)     5V nominal output
do44       r           J2.41 (+), J2.42 (-)     5V nominal output
do45       r           J2.43 (+), J2.44 (-)     5V nominal output
do46       r           J2.45 (+), J2.46 (-)     5V nominal output
do47       r           J2.47 (+), J2.48 (-)     5V nominal output
</table>
See Also
<link Summary, Register Summary>



@@SPI Configuration
<title SPI Configuration (Offset=10\, Bank=6)>

Summary
SPI Configuration Register
Description
The SPI Module is always a master device.

The clock and data relationships are illustrated at <extlink http://en.wikipedia.org/wiki/Serial_Peripheral_Interface_Bus>http://en.wikipedia.org/wiki/Serial_Peripheral_Interface_Bus</extlink>.

* SPI Mode *
<table>
SPI MODE   Clock Polarity<p />SCLK_POL   Clock Phase<p />SCLK_PHA
=========  ============================  =========================
0          0                             0
1          0                             1
2          1                             0
3          1                             1
</table>

\NOTE: Writing to the configuration register will restart the
SPI state machine and FIFOs. This allows software a very
simple mechanism to terminate any hardware data transaction
that might be in progress and restart in a known state. In
general, this is rarely required. If on the other hand, the
FIFO size is grown to some larger depth, then having this
feature becomes essential. The restart time is 4 main clock
times (~80nS).




Register Layout
\ \ 

<b>Offset = 0xA, Bank = 6. Read/Write.</b>
<table>
D7          D6     D5     D4     D3        D2        D1         D0
==========  =====  =====  =====  ========  ========  =========  =========
SDIO_WRAP   CSB2   CSB1   CSB0   SDO_POL   SDI_POL   SCLK_PHA   SCLK_POL
</table>
Bit Definitions
<table>
NAME        DIRECTION   DEFAULT   \DESCRIPTION
==========  ==========  ========  ------------------------------------------------------------
SDIO_WRAP   rw          0         SPI Interface Serial Data Wrap. The purpose of the
                                   SDIO_WRAP is to wrap the serial data out back into the
                                   serial data input. This can be useful in testing software
                                   as all data transmitted is reflected back to the receiver.
                                   The transmitted data will be delivered to any defined
                                   \output. Any external SDI input is ignored. The chip select
                                   will be inactive to prevent bogus external writes.<p />0 =
                                   Normal<p />1 = Serial Data Out (SDO) is tied to Serial Data
                                   \Input (SDI)<p /><p />Setting SDIO_WRAP and filling the
                                   FIFO with data until full will provide a count which can be
                                   used to indicate the number of bytes that the FIFO can
                                   accept.
CSB[2:0]    rw          000       SPI interface Chip Select Behavior.<p />000 = Software
                                   Controlled Chip Select (default). Data transacted
                                   immediately upon arrival into transmit FIFO.<p />001 = Chip
                                   Select becomes active at the TX buffer commit and remains
                                   active until the transmit FIFO becomes empty. This is a way
                                   to transmit mulitple bytes with chip select remaining
                                   active until all bytes transmitted. The assumption here is
                                   that the number of bytes to exchange is no more than
                                   SPI_FIFO_SIZE, or so long as the TX FIFO does not become
                                   empty. In order for the chip select to properly <i>wrap</i>
                                   around the data the software is required to wait until the
                                   FIFO becomes empty. When the commit register is written,
                                   the exchange of SPI data begins; in other words, there is
                                   no time constraint for the software to write the data to
                                   the FIFO in preparation for the SPI data exchange.<p />010
                                   = Chip select becomes active at the TX buffer commit and
                                   will toggle every 8-bits (data byte) until buffer empty.
                                   Goes inactive when buffer is empty. Must restart/commit any
                                   time the transmit buffer has become empty.<p />011 = Chip
                                   select becomes active at the TX buffer commit and will
                                   toggle every 16-bits (two data byte) until buffer empty.
                                   Goes inactive when buffer is empty, even if an odd number
                                   of bytes transmitted. The assumption here is that the
                                   number of bytes to exchange is no more than SPI_FIFO_SIZE.
                                   In order for the chip select to properly <i>wrap</i> around
                                   the data the software is required to wait until the FIFO
                                   has at least two available byte locations to write. When
                                   the commit register is written, the exchange of SPI data
                                   begins; in other words, there is no time constraint for the
                                   software to write the data to the FIFO in preparation for
                                   the SPI data exchange. When the software writes data to the
                                   FIFO it must ensure that 2-bytes are written in close time
                                   proximity so that the chip select operates correctly. The
                                   number of 16-bit words that can be written to the FIFO
                                   prior to commit is SPI_FIFO_SIZE / 2.
SDO_POL     rw          0         SPI Interface Serial Data Output Polarity.<p />0 =
                                   non-inverted<p />1 = inverted
SDI_POL     rw          0         SPI Interface Serial Data Input Polarity.<p />0 =
                                   non-inverted<p />1 = inverted
SCLK_PHA    rw          0         SPI Interface Clock Phase.<p />0 = data captured on the
                                   low-to-high transition of the SPI clock, data is propagated
                                   on high-to-low clock transition.<p />1 = data captured on
                                   high-to-low transition of the SPI clock, data is propagated
                                   on the low-to-high clock transition.
SCLK_POL    rw          0         SPI Interface Clock Polarity.<p />0 = non-inverted<p />1 =
                                   inverted
</table>
Example
\ \ 
See Also
<link Summary, Register Summary>

@@SPI Half Clock Interval
<title SPI Half Clock Interval (Offset=12\, Bank=6)>

Summary
Serial Interface Half Clock Interval Timer Register
Description
This register sets the time interval of SPI half clock
intervals and subsequently used to generate the serial clock
and end of cycle delay (i.e. recovery time).

<code lang="c++">
\#define CLOCK_FREQ_MHZ        50
\#define CLOCK_INTERVAL_NS     20

double         spi_half_clock_interval_sec;
double         spi_clock_fequency_hz;
double         scratch;
uint16_t       shci;                          /* spi half clock interval */

spi_half_clock_interval_sec = ( ((double) CLOCK_INTERVAL_NS) * 1.0e-9 ) * ( (double) ( 4 + schi ) )

/* The range of half clock interval is 80nS (SHCI=0) to 9,900nS (SHCI=4095)                        */

/* Overall SPI clock frequency can be calculated                                                   */

spi_clock_frequency_hz = 1 / ( 2 * spi_half_clock_interval_sec ).
spi_clock_frequency_hz = 1.0 / ( 2.0 * ( ((double) CLOCK_INTERVAL_NS) * 1.0e-9 ) * ( 4.0 + spi_half_clock_interval_sec );

/* In other words, serial clock is adjustable from 50.5 KHz to  6.25 MHz.                          */

/* typical shci calculation given desired SPI clock frequency.
scratch = ( 1.0 - ( 8.0 *  ( ((double) CLOCK_INTERVAL_NS) * 1.0e-9 ) * spi_clock_frequency_hz ) ) /
                  (  2.0 * ( ((double) CLOCK_INTERVAL_NS) * 1.0e-9 ) * spi_clock_frequency_hz );

shci = (uint16_t) scratch;


</code>
Register Layout
\ \ 

<b>Offset = 0xC, Bank = 6. Read/Write. SHCI Low Byte (LSB).</b>
<table>
D7      D6      D5      D4      D3      D2      D1      D0
======  ======  ======  ======  ======  ======  ======  ======
SHCI7   SHCI6   SHCI5   SHCI4   SHCI3   SHCI2   SHCI1   SHCI0
</table>

<b>Offset = 0xD, Bank = 6. Read/Write. SHCI High Byte (MSB).</b>
<table>
D15   D14   D13   D12   D11      D10      D9      D8
====  ====  ====  ====  =======  =======  ======  ======
X     X     X     X     SHCI11   SHCI10   SHCI9   SHCI8
</table>
Bit Definitions
<table>
NAME         DIRECTION   DEFAULT   \DESCRIPTION
===========  ==========  ========  ---------------------------
X            \-          \-        Don't Care
SHCI[11:0]   rw          0x000     Serial Half-Clock Interval
</table>
Example
\ \ 
See Also
<link Summary, Register Summary>



<link SPI_Calculate_Half_Clock_Interval_Sec@uint16_t, SPI_Calculate_Half_Clock_Interval_Sec Function>



<link SPI_Calculate_Clock@double@double *@double *@uint16_t *, SPI_Calculate_Clock Function>

@@SPI Data
<title SPI Data (Offset=8\, Bank=7>

Summary
SPI Transmit and Receive data FIFOs.
Description
\ \ 
Register Layout
<b>Offset = 0x8, Bank = 7. Read/Write.</b>
<table>
D7    D6    D5    D4    D3    D2    D1    D0
====  ====  ====  ====  ====  ====  ====  ====
SD7   SD6   SD5   SD4   SD3   SD2   SD1   SD0
</table>
Bit Definitions
<table>
NAME      DIRECTION   DEFAULT   \DESCRIPTION
========  ==========  ========  --------------------------------------
SD[7:0]   rw          \-        Serial data transmit and receive data
                                 buffers (FIFOs).
</table>
Example
\ \ 
See Also
<link Summary, Register Summary>

@@SPI Transmit FIFO Status
<title SPI Transmit FIFO Status (Offset=9\, Bank=7)>

Summary
SPI interface transmit FIFO status
Description
\ \ 

Provides the status of the transmit FIFO.
Register Layout
\ \ 

<b>Offset = 0x9, Bank = 7. Read only.</b>
<table>
D7            D6             D5   D4           D3           D2           D1           D0
============  =============  ===  ===========  ===========  ===========  ===========  ===========
SPI_TX_FULL   SPI_TX_EMPTY   X    SPI_TX_BC4   SPI_TX_BC3   SPI_TX_BC2   SPI_TX_BC1   SPI_TX_BC0
</table>
Bit Definitions
<table>
NAME             DIRECTION   DEFAULT   \DESCRIPTION
===============  ==========  ========  -----------------------------------------------------------------
X                \-          \-        Don't Care
SPI_TX_FULL      r           0         Serial Interface Transmit FIFO Full Flag<p />0 =
                                        FIFO not Full<p />1 = FIFO full
SPI_TX_EMPTY     r           1         Serial Interface Transmit FIFO Empty Flag<p />0 =
                                        FIFO not empty<p />1 = FIFO empty
SPI_TX_BC[4:0]   r           00000     Serial Interface Transmit FIFO byte count that
                                        remains within the FIFO.<p />available_bytes_that_can_be_written
                                        = SPI_FIFO_SIZE - SPI_TX_BA<p />This provides and
                                        fast and easy way to determine the maximum quantity
                                        of bytes that can be written without having to
                                        constantly check FIFO empty and full flags.
</table>
Example
\ \ 
See Also
<link Summary, Register Summary>

@@Hardware ID LSB
<title Hardware ID LSB (Offset=14\, Bank=don't care)>

Summary
Hardware ID Least Significant Byte (LSB)
Description
\ \ 

Read both the LSB and MSB register to obtain hardware
identification. This is a 16-bit value which represents the
board and the FPGA firmware revision. Its purpose is to
assist software driver/libraries to determine how to interact
with the board.



This is not compliant with existing register sets, however,
we feel that since these registers are not likely used, it
will make software driver development a bit easier and also
aid in management of FPGA firmware revisions with respect to
software drivers.



The ID will be an arbitrary number which simply indicates the
revision of the firmware. This allows software to
automatically accommodate one or more FPGA firmware versions
in the field.
Register Layout
<b>Offset = 0xE, Bank = don't care.</b>
<table>
D7    D6    D5    D4    D3    D2    D1    D0
====  ====  ====  ====  ====  ====  ====  ====
id7   id6   id5   id4   id3   id2   id1   id0
</table>
Bit Definitions
<table>
NAME        DIRECTION   DEFAULT   \DESCRIPTION
==========  ==========  ========  ----------------------------------------
id[15..0]   r           \-        The digital output component or in this
                                   case the board ID.
</table>
Example
\ \ 
See Also
<link Summary, Register Summary>

@@Hardware ID MSB
<title Hardware ID MSB (Offset=15\, Bank=don't care)>

Summary
Hardware ID Most Significant Byte (MSB)
Description
\ \ 

Read both the LSB and MSB register to obtain hardware
identification. This is a 16-bit value which represents the
board and the FPGA firmware revision. Its purpose is to
assist software driver/libraries to determine how to interact
with the board.
Register Layout
<b>Offset = 0xF, Bank = don't care.</b>
<table>
D7     D6     D5     D4     D3     D2     D1    D0
=====  =====  =====  =====  =====  =====  ====  ====
id15   id14   id13   id12   id11   id10   id9   id8
</table>
Bit Definitions
<table>
NAME        DIRECTION   DEFAULT   \DESCRIPTION
==========  ==========  ========  ----------------------------------------
id[15..0]   r           \-        The digital output component or in this
                                   case the board ID.
</table>
Example
\ \ 
See Also
<link Summary, Register Summary>


@@SPI ID LSB
<title SPI ID LSB (Offset=8\, Bank=6)>

Summary
Hardware ID Least Significant Byte (LSB)
Description
\ \ 

Read both the LSB and MSB register to obtain hardware
identification. This is a 16-bit value which represents the
board and the FPGA firmware revision. Its purpose is to
assist software driver/libraries to determine how to interact
with the board.
Register Layout
<b>Offset = 0xE, Bank = don't care.</b>
<table>
D7    D6    D5    D4    D3    D2    D1    D0
====  ====  ====  ====  ====  ====  ====  ====
id7   id6   id5   id4   id3   id2   id1   id0
</table>
Bit Definitions
<table>
NAME        DIRECTION   DEFAULT   \DESCRIPTION
==========  ==========  ========  ----------------------
id[15..0]   r           \-        The SPI component ID.
</table>
Example
\ \ 
See Also
<link Summary, Register Summary>

@@SPI ID MSB
<title SPI ID LSB (Offset=9\, Bank=6)>

Summary
Hardware ID Most Significant Byte (MSB)
Description
\ \ 

Read both the LSB and MSB register to obtain hardware
identification. This is a 16-bit value which represents the
board and the FPGA firmware revision. Its purpose is to
assist software driver/libraries to determine how to interact
with the board.
Register Layout
<b>Offset = 0xF, Bank = don't care.</b>
<table>
D7     D6     D5     D4     D3     D2     D1    D0
=====  =====  =====  =====  =====  =====  ====  ====
id15   id14   id13   id12   id11   id10   id9   id8
</table>
Bit Definitions
<table>
NAME        DIRECTION   DEFAULT   \DESCRIPTION
==========  ==========  ========  ----------------------
id[15..0]   r           \-        The SPI component ID.
</table>
Example
\ \ 
See Also
<link Summary, Register Summary>

@@SPI End Cycle Delay
<title SPI End Cycle Delay (Offset=11\, Bank=6)>

Summary
SPI End Cycle Delay Register
Description
The time delay between bytes of data sent out the SPI port.
It is the time after the last bit is written.

<code lang="c++">
\#define CLOCK_PERIOD_SEC   20.0e-9


int SPI_End_Cycle_Delay_Calculate( double    spi_half_clock_interval_sec, /* calculated half-clock interval     */
                                   double    delay_request_sec,           /* requested end-delay interval       */
                                   double *  delay_actual_sec,            /*  computed actual delay             */
                                   double *  error,                       /* error between actual and desired   */
                                   uint8_t * ecd                          /* computed count                     */
                                )
{
    double        delay_between_words_sec;
    double        scratch;
    int            ecd_temp;

    /* delay_sec = CLOCK_PERIOD_SEC * 4 + ECD * spi_half_clock_interval_sec  */
    scratch = ( delay_request_sec - 4.0 * CLOCK_PERIOD_SEC ) / spi_half_clock_interval_sec;
    ecd_temp = (int) scratch;

    if ( ( ecd_temp \> 255 ) || ( ecd_temp \< 0 ) ) return -EC_SPI_ECD_OUT_OF_RANGE;

    if ( NULL != error            ) *error            = ( scratch - delay_request_sec ) / delay_request_sec;
    if ( NULL != delay_actual_sec ) *delay_actual_sec = CLOCK_PERIOD_SEC * 4.0 + ((double) ecd_temp) * spi_half_clock_interval_sec;
    if ( NULL != ecd              ) *ecd              = (uint8_t) ecd_temp;
    return SUCCESS;
}
</code>
Register Layout
\ \ 

<b>Offset = 0xA, Bank = 6. Read/Write.</b>
<table>
D7     D6     D5     D4     D3     D2     D1     D0
=====  =====  =====  =====  =====  =====  =====  =====
ECD7   ECD6   ECD5   ECD4   ECD3   ECD2   ECD1   ECD0
</table>
Bit Definitions
<table>
NAME       DIRECTION   DEFAULT   \DESCRIPTION
=========  ==========  ========  --------------------------------------------------------
ECD[7:0]   rw          0000      SPI Interface End Cycle Delay. This is the delay or
                                  recovery time from the last byte transmitted to the
                                  next byte to be transmitted.<p />delay_between_words_ns
                                  = 20nS * 4 + ECD * Half_Clock_Interval_ns;<p />Note:
                                  20nS is the main clock interval.
</table>
Example
\ \ 
See Also
<link Summary, Register Summary>



<link SPI_Calculate_End_Cycle_Delay@double@double@double *@double *@uint8_t *, SPI_Calculate_End_Cycle_Delay Function>


@@SPI Receive FIFO Status
<title SPI Receive FIFO Status (Offset=10\, Bank=7)>

Summary
SPI interface receive FIFO status
Description
\ \ 

Provides the status of the receive FIFO.
Register Layout
\ \ 

<b>Offset = 0xA, Bank = 7. Read only.</b>
<table>
D7            D6             D5   D4           D3           D2           D1           D0
============  =============  ===  ===========  ===========  ===========  ===========  ===========
SPI_RX_FULL   SPI_RX_EMPTY   X    SPI_RX_BA4   SPI_RX_BA3   SPI_RX_BA2   SPI_RX_BA1   SPI_RX_BA0
</table>
Bit Definitions
<table>
NAME             DIRECTION   DEFAULT   \DESCRIPTION
===============  ==========  ========  --------------------------------------------------
X                \-          \-        Don't Care
SPI_RX_FULL      r           0         Serial Interface Receive FIFO Full Flag<p />0 =
                                        FIFO not Full<p />1 = FIFO full
SPI_RX_EMPTY     r           1         Serial Interface Receive FIFO Empty Flag<p />0 =
                                        FIFO not empty<p />1 = FIFO empty
SPI_RX_BA[4:0]   r           00000     Serial Interface Receive FIFO bytes available
                                        within the FIFO that can be read out. This
                                        provides and fast and easy way to determine the
                                        quantity to read-out without having to constantly
                                        check FIFO empty and full flags.
</table>
Example
\ \ 
See Also
<link Summary, Register Summary>

