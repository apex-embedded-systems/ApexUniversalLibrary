
@@Commands
Description
\ \ 



\NOTE:
  1. This software will merge into a more general structure
     to be used by all boards.
  2. Refer to latest software for latest commands. This
     section may not be totally up to date.

This software is set up to test the following boards:
  * STDBus Isolated Digital Input Board (IDI48)
  * STDBus Isolated Digital Output Board (IDO48)

The current application runs in DOS. Later it will be
retargetted to MQX running on the K64F CPU board (ARM32).



It is possible to write shell or batch scripts to build more
complex testing scenarios which is supported via the "sh"
command in MQX command line processor.

* Notes *
\1. the '[' and ']' are used to indicate an optional
parameter.

\2. the '\<' and '\>' indicate a required parameter

\3. \<type\> to be replaced by "idi" or "ido" or "IDI" or
"IDO" as the board type (without the quotes).

\4. Software intended to drive only one board of each type.

\5. \<bool\> can be any of the following "0", "1", "t", "T",
"f", "F". The string can be more than one character, only the
first character is tested.

* Loops *
All commands except 'help' can have a "loop" prefix such that
the command is issued over and over until a key is pressed.

\Example: This example will output all digital inputs in
binary format in an endless loop until a key is pressed.



More specifically, possible loop prefix to the command is as
follows: [loop [count \<value\>] [delay \<milliseconds\>] ].



Here are some examples:

<pre>
Loop as fast as you can or until a key is pressed at terminal:
        b loop di all binary

Loop with a 100mS delay or until a key is pressed at terminal:
        b loop delay 100 di all binary

Loop as fast as you can 10 times or until a key is pressed at terminal:
        b loop count 10 di all binary

Loop with a 100mS delay 10 times or until a key is pressed at terminal:
        b loop delay 100 count 10 di all binary

</pre>

* Interrupts *
All commands except 'help' can pick up the predefined irq
provided the "irq" prefix within the command is issued.

\Example #1: "idi irq loop din all binary". In this case we
allow an interrupt to be used by the "din all" function.

\Example #2: "idi irq din all binary". In this case we allow
an interrupt to occur during the short run of the "din all"
function.

* Command List *
Revised July 15, 2015 - combining IDO48 and IDI48 commands.
<table>
Command                   \Description
------------------------  ------------------------------------------------------------------------------------------------------------------------------------
b [help]                  Outputs human readable help to the
 [\<file                   terminal. If a file name is included
 name\>]                   in the command the help will be
                           dumped directly to the file,
                           otherwise it is dumped to the default
                           terminal twenty lines at a time.
\                         
b \<type\>                Outputs a textual list of register
 dump [\<file              information in CSV format. If file
 name\>]                   name is not specified it is dumped to
                           the terminal.
b \<type\>                Reads or writes a register to/from
 \<register                the board specified. If \<value\> is
 acronym\>                 not present, then a read is assumed.
 [\<value\>]               The ability to read or write is
                           defined by the register set
                           read/write column. The register
                           acronym along with read/write access
                           can be found by referring to
                           IDO_REGISTER_SET_DEFINITION and
                           IDO_REGISTER_SET_DEFINITION for
                           further details or the register set
                           \summary.
\                         
b \<type\>                \Reports most of the parameters that
 set                       are stored in IDO_INIT.BIN or
                           IDO_INIT.BIN file.
b \<type\>                \Reports most of the parameters that
 set                       are stored in the IDO_INIT.BIN file.
b \<type\>                \Reports the base address. This is
 set base                  stored in a binary file which will
                           NOT be compatible between 16-bit and
                           32-bit. However, it is easily
                           reproduced.
b \<type\>                Sets the base address from which we
 set base                  will use for all additional commands.
 \<address\>               This is stored in a binary file which
                           will NOT be compatible between 16-bit
                           and 32-bit due to padding. However,
                           it is easily reproduced.
b \<type\>                The "io" commands are intended for
 set io                    debugging purposes including
                           situations where there is no
                           hardware.<p />reports I/O simulation
                           and reporting modes.
b \<type\>                \reports the state of I/O simulation.
 set io                    If "false", then we write to
 simulate                  hardware, otherwise it prints the
                           transaction to the terminal.
b \<type\>                \reports the state of I/O reporting.
 set io                    If "false", then I/O is not reported,
 report                    otherwise any I/O transaction is
                           reported to the terminal.
b \<type\>                sets the I/O simulation mode.
 set io                    
 simulate                  
 \<true/false\>            
b \<type\>                sets the I/O reporting.
 set io                    
 report                    
 \<true/false\>            
b idi set                 Writes or reads the IRQ number
 irq [\<irq                default for the application to use.
 number\>]                 
b idi set                 Writes or reads the maximum IRQ count
 iqty [\<irq               before software exists. Currently,
 count                     not used by any of the application.
 quantity\>]               
\                         
b [loop]                  \reports the digital input module ID
 [idi] di id               as a 16-bit value. This can be
                           considered the board revision/ID as
                           well.
b [loop]                  \reports all digital input values
 [idi] di                  
b [loop]                  \reports all digital input values.<p />If
 [idi] di                  'binary' specified then only binary
 all                       representation is output. If 'hex' or
 [\<binary\>]              'group' is specified then only the
 [\<hex/group\>]           hexadecimal byte values are output.
                           If both or neither parameters are
                           specified, then both formats are
                           \output.
b [loop]                  \Reports a digital input value at a
 [idi] di                  given channel, where 0 \<= n \<= 47
 chan \<n\>                
b [loop]                  \Reports all digital inputs at all
 [idi] di                  groups
 group                     
b [loop]                  \Reports all digital inputs at all
 [idi] di                  groups
 group all                 
b [loop]                  \Reports a byte of digital inputs at
 [idi] di                  the given group, where 0 \<= n \<= 5
 group \<n\>               
b [loop]                  As each input is toggled, the
 [idi] di                  software logs until all inputs have
 test value                been successfully toggled. Once all
                           \inputs are toggled, a "PASS" string
                           is indicated. Pressing any key will
                           stop the execution of the command
                           followed by a "FAIL" string.
b [loop]                  This test is checking specifically
 [idi] di                  for rising-edge detection (LED
 test re                   perspective). As each input is
                           toggled, the software logs until all
                           \inputs have been successfully
                           toggled. Once all inputs are toggled,
                           a "PASS" string is indicated.
                           Pressing any key will stop the
                           execution of the command followed by
                           a "FAIL" string.
b [loop]                  This test is checking specifically
 [idi] di                  for falling-edge detection (LED
 test fe                   perspective). As each input is
                           toggled, the software logs until all
                           \inputs have been successfully
                           toggled. Once all inputs are toggled,
                           a "PASS" string is indicated.
                           Pressing any key will stop the
                           execution of the command followed by
                           a "FAIL" string.
b [irq]                   This test is checking specifically
 [idi] di                  for rising-edge detection (LED
 test                      perspective). This time interrupts
 interrupt                 are activated and used for detection.
 [\<irq #\>]               As each input is toggled, the
                           software logs until all inputs have
                           been successfully toggled. Once all
                           \inputs are toggled, a "PASS" string
                           is indicated. Pressing any key will
                           stop the execution of the command
                           followed by a "FAIL" string.<p />Optional
                           IRQ number can be given, otherwise it
                           reverts to the IRQ number specified
                           in the "idi set irq"
\                         
b [loop]                  Read or write to the digital output
 [ido] do                  channel, where 0 \<= n \<= 47.. If
 chan \<n\>                the boolean value is missing it is
 [\<bool\>]                assumed to be a read, otherwise a
                           write will occur.
b [loop]                  Read or write to the digital output
 [ido] do                  group (8-bit data). If no values are
 group [\<n\>]             present then it is assumed to be a
 [\<value\>                read, otherwise a byte write
 [\<value\>]               operation will occur starting at
 [\<value\>]               group position n up to the last
 [\<value\>]               possible group number. Note that 0 \<=
 [\<value\>]               n \<= 5.<p /><p />Example: b do group
 [\<value\>]               4 0xAA 0x55<p />In this case it is
 ]                         writing to register DOG4 and DOG5.
b [loop]                  \Reports all digital output values in
 [ido] do                  the format requested.<p />If 'binary'
 all                       specified then only binary
 [\<binary\>]              representation is output. If 'hex' or
 [\<hex/group\>]           'group' is specified then only the
                           hexadecimal byte values are output.
                           If both or neither parameters are
                           specified, then both formats are
                           \output.
b [ido] do                Toggles each individual output one at
 test onehot               a time. This test can be exited at
 [\<on_time\>]             any time by pressing any key. This
 [\<off_time\>]            can be easily observable using an LED
                           panel.
b [ido] do                Outputs pattern on all groups (or
 test                      ports). The pattern will be inverted.
 alternate                 
 \<pattern\>               
 time                      
 [\<time_normal\>]         
 [\<time_inverted\>]       
b [ido] do                Assumes IDI48 and interconnection
 test                      cables have been installed. It
 loopback                  assumes that the IDI48 base address
 [\<result                 has been properly set.<p />Output is
 \file\>]                  directly to terminal or to file.
\                         
\                         
\                         
\                         
\                         
\                         
\                         
\                         
\                         
\                         
\                         
\                         
\                         
b \<type\>                \reports the spi wishbone component
 spi id                    ID
b \<type\>                \reports the spi configuration as it
 spi cfg                   exists within the hardware
b \<type\>                \reports the spi clock frequency in
 spi clk                   hertz
b \<type\>                set the spi clock frequency in hertz
 spi clk                   
 \<freq hz\>               
b \<type\>                \reports the spi end of cycle delay
 spi ecd                   in seconds
b \<type\>                set the spi end of cycle delay in
 spi ecd                   seconds
 \<time in                 
 seconds\>                 
b \<type\>                \reports the spi mode (i.e. clock
 spi mode                  phase and polarity combination)
b \<type\>                set the spi mode, where the value is
 spi mode                  either 0,1,2, or 3.
 \<0/1/2/3\>               
b \<type\>                \reports the spi sdi polarity. SDI is
 spi sdi                   the serial data input.
b \<type\>                sets the spi sdi polarity
 spi sdi                   
 \<true/1/false/0\>        
b \<type\>                \reports the spi sdo polarity. SDO is
 spi sdo                   the serial data output.
b \<type\>                sets the spi sdo polarity.
 spi sdo                   
 \<true/1/false/0\>        
b \<type\>                \reports the spi wrap. If wrap='1'
 spi wrap                  then the SDO is routed to SDI
                           internally (i.e. loopback).
b \<type\>                sets the spi wrap, where false/0 =\>
 spi wrap                  no wrap, true/1 =\> wrap.
 \<true/1/false/0\>        
b \<type\>                \reports the spi chip select behavior
 spi csb                   
b \<type\>                sets the spi chip select behavior
 spi csb                   
 \<0/1/2/3\>               
b \<type\>                \reports the spi read fifo status
 spi status                
b \<type\>                \reports the spi read fifo status
 spi status                
 rx                        
b \<type\>                \reports the spi write fifo status
 spi status                
 tx                        
b \<type\>                \reports either tx fifo status or rx
 spi status                fifo status or both.
 [tx] [rx]                 
b \<type\>                write/read one or more bytes. If the
 spi data                  fifo becomes full prior to writing
 \<character/number\>      all the values, the remaining values
 [\<character/number\>]    will be ignored.<p /><p />Examples:<p /><p />write
                           a single data byte and get a single
                           byte in return.<p />idi spi data 0x55<p /><p />write
                           5 characters and receive five
                           characters<p />idi spi data tx h e l
                           l o
b \<type\>                reads out the remaining data sitting
 spi fifo                  in the spi read fifo (until empty)
                           and produces a report.
b \<type\>                reads out the remaining data sitting
 spi fifo rx               in the spi read fifo (until empty)
                           and produces a report.
b \<type\>                reads out the remaining 'number' of
 spi fifo rx               bytes from the receive/read fifo
 [\<number\>]              (until empty) and produces a report.
b \<type\>                writes data to the transmit/write
 spi fifo tx               fifo. If the fifo becomes full prior
 \<character/number\>      to writing all the values, the
 [\<character/number\>]    remaining values will be ignored.<p /><p />Examples:<p /><p />write
                           a single data byte:<p />idi spi data
                           tx 0x55<p /><p />write 5 characters
                           to the fifo<p />idi spi data tx h e l
                           l o<p /><p />The data can be single
                           characters, decimal or hex numbers.
                           \Examples: a, 0x55, 125,.<p />The
                           data can also be a double quote
                           encased string. Example: "this is a
                           \sample string".<p />
b \<type\>                Depending on chip select behavior
 spi fifo                  this will either set/clear the chip
 commit                    select or tell the SPI module to
 [\<1/0\>]                 begin transmitting any data sitting
                           in the write/transmit FIFO.
b \<type\>                \reports the data from the starting
 fram dump                 address of the FRAM for a given
 \<address\>               length or number of bytes. The report
 [\<length\>]              is typical of any memory dump where
                           it posts for each line a starting
                           address, up to 16 hexadecimal values
                           followed by ASCII representation. If
                           length is not specified, then up to
                           16-bytes (or until end of the FRAM)
                           is reported. This report does not
                           wrap around the end of the FRAM, just
                           \reports up to the end.
b \<type\>                Saves the portion of FRAM to a given
 fram save                 \file name. There is no limit on the
 \<address\>               length as the range can be from 0
 \<length\>                (nothing written) to
 \<binary                  FRAM_DENSITY_BYTES (=8192 bytes).
 \file name\>              
b \<type\>                Reads data from the binary file and
 fram load                 loads it into the FRAM starting at
 \<address\>               the address location. If the length
 \<binary                  is set to 0, then it will read all of
 \file name\>              the file up to the end of the FRAM.
                           If length is specified, then it is
                           possible to only load a portion of a
                           binary file.
b \<type\>                Initializes the FRAM with a given
 fram init                 pattern. If no pattern is specified,
 [\<character/number\>     it will be filled with all zeros. The
 [\<character/number\>]]   pattern can be any number of
                           characters. Only the first 16 values
                           will be used, any additional values
                           will be ignored. This allows one to
                           create a unique pattern especially
                           for implementing a memory manager to
                           manage the FRAM memory.<p />The data
                           can be single characters, decimal or
                           hex numbers. Examples: a, 0x55, 125,.<p />The
                           data can also be a double quote
                           encased string. Example: "this is a
                           \sample string".
b \<type\>                Write data to the FRAM give a
 fram write                starting address.<p />The data can be
 \<address\>               single characters, decimal or hex
 [\<character/number\>     numbers. Examples: a, 0x55, 125,.<p />The
 [\<character/number\>]]   data can also be a double quote
                           encased string. Example: "this is a
                           \sample string".
b \<type\>                Sets the write enable latch of the
 fram wren                 FRAM. Note: WREN = WRite ENable.
b \<type\>                Resets the write enable latch of the
 fram wrdi                 FRAM. Note: WRDI = WRite DIsable.
b \<type\>                Read and report FRAM status register.<p /><p />Status
 fram rdsr                 register format:<p /><c>BIT
                           \DESCRIPTION</c><p /><c>7 WPEN -
                           status register write protect.</c><p /><c>6..4
                           not used</c><p /><c>3 BP1 - block
                           protect</c><p /><c>2 BP0 - block
                           protect</c><p /><c>1 WEL - write
                           latch enable</c><p /><c>0 0 - fixed
                           as zero</c><p /><p />Please refer to
                           the <link http://www.fujitsu.com/downloads/MICRO/fsa/pdf/products/memory/fram/MB85RS64V-DS501-00015-4v0-E.pdf, datasheet>.
b \<type\>                Write to the FRAM status register.<p /><p />Status
 fram wrsr                 register format:<p /><c>BIT
 \<status                  \DESCRIPTION</c><p /><c>7 WPEN -
 byte\>                    status register write protect.</c><p /><c>6..4
                           not used</c><p /><c>3 BP1 - block
                           protect</c><p /><c>2 BP0 - block
                           protect</c><p /><c>1 WEL - write
                           latch enable</c><p /><c>0 0 - fixed
                           as zero</c><p /><p />Please refer to
                           the <link http://www.fujitsu.com/downloads/MICRO/fsa/pdf/products/memory/fram/MB85RS64V-DS501-00015-4v0-E.pdf, datasheet>.<p />
b \<type\>                report the FRAM ID register. The FRAM
 fram rdid                 we are using contains such register,
                           most others do not. The output is a
                           32-bit hex value of the format:<p />\<manufacture_id\>\<continuation
                           code\>\<product ID MSB\>\<Product ID
                           LSB\>.<p /><p />\<manufacture_id\> =
                           0x04 (Fujitsu).<p />\<continuation
                           code\> = 0x7F (fixed constant).<p />\<product
                           ID MSB\> = 0x03 ( indicating 64kbit
                           density)<p />\<product ID LSB\> =
                           0x02 (proprietary information)<p /><p />Please
                           refer to the <link http://www.fujitsu.com/downloads/MICRO/fsa/pdf/products/memory/fram/MB85RS64V-DS501-00015-4v0-E.pdf, datasheet>.
b o                       Unrestricted I/O write. The data is a
 \<address\>               byte.
 \<data\>                  
b i                       Unrestricted I/O read. Will return a
 \<address\>               byte value.
b [\<type\>]              Simply waits until any key is
 wait                      pressed.
\                         
</table>

@@C Test Code - DOS
\ \ 
